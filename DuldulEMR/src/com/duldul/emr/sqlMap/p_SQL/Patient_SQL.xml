<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN"
    "http://ibatis.apache.org/dtd/sql-map-2.dtd"> <!-- 주소가 없으면 자동완성 기능이 안된다 -->
<!-- xml은 민감하기 때문에 오타가 났을경우 돌아가지 않는다 -->
<sqlMap namespace="Patient_Data">

<!-- 2016-12-01 환자조회 데이터, 카운터 쿼리 추가
			 02  직원조회 데이터, 카운터 쿼리 추가 
			 05  환자,직원조회 데이터 개발완료-->
			 
	<select id="pat_DataList" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT A.NO, A.PATIENT_NUM, A.PATIENT_NAME, A.BIRTH, A.PHONE1, A.ADDRESS, A.BLOOD
		FROM 
		(
		SELECT ROW_NUMBER() OVER(ORDER BY A.PATIENT_NUM DESC) AS NO, P.PATIENT_NUM, P.PATIENT_NAME, TO_CHAR(BIRTH, 'YYYY-MM-DD') AS BIRTH, PHONE1, ADDRESS, CODE_NAME AS BLOOD
		FROM PATIENT P LEFT OUTER JOIN (SELECT M.PATIENT_NUM, C.CODE_NAME
		FROM PATIENTMORE M LEFT OUTER JOIN (SELECT * FROM CODEDATA WHERE BIG = '3') C
		ON M.BLOOD = C.SMALL) A
		ON P.PATIENT_NUM = A.PATIENT_NUM
		WHERE 1 = 1
		<isNotEmpty property="search_Text1">
			<isEqual property="selP_b" compareValue="PATIENT_NUM">
				AND P.PATIENT_NUM LIKE '%' || #search_Text1# || '%'
			</isEqual>
			<isEqual property="selP_b" compareValue="PATIENT_NAME">
				AND P.PATIENT_NAME LIKE '%' || #search_Text1# || '%'
			</isEqual>
			<isEqual property="selP_b" compareValue="BIRTH">
				AND TO_CHAR(P.BIRTH, 'YYYYMMDD') LIKE '%' || #search_Text1# || '%'
			</isEqual>
			<isEqual property="selP_b" compareValue="PHONE1">
				AND P.PHONE1 LIKE '%' || #search_Text1# || '%'
			</isEqual>
			<isEqual property="selP_b" compareValue="ADDRESS">
				AND P.ADDRESS LIKE '%' || #search_Text1# || '%'
			</isEqual>
		</isNotEmpty> <!-- 검색 -->
		) A
		WHERE NO BETWEEN #start# AND #end#
	</select> <!-- 환자조회 데이터 쿼리 -->
	
	<select id="Pat_Count" parameterClass="java.util.HashMap" resultClass="Integer">
		SELECT COUNT(PATIENT_NUM) AS CNT
		FROM PATIENT
		WHERE 1 = 1
		<isNotEmpty property="search_Text1">
			<isEqual property="selP_b" compareValue="PATIENT_NUM">
				AND PATIENT_NUM LIKE '%' || #search_Text1# || '%'
			</isEqual>
			<isEqual property="selP_b" compareValue="PATIENT_NAME">
				AND PATIENT_NAME LIKE '%' || #search_Text1# || '%'
			</isEqual>
			<isEqual property="selP_b" compareValue="BIRTH">
				AND BIRTH LIKE '%' || #search_Text1# || '%'
			</isEqual>
			<isEqual property="selP_b" compareValue="PHONE1">
				AND PHONE1 LIKE '%' || #search_Text1# || '%'
			</isEqual>
			<isEqual property="selP_b" compareValue="ADDRESS">
				AND ADDRESS LIKE '%' || #search_Text1# || '%'
			</isEqual>
		</isNotEmpty> <!-- 검색 -->
	</select> <!-- 환자조회 카운터 쿼리 -->
	
	<select id="Emp_DataList" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT NO, EMP_NUM, EMP_NAME, POSITION_CODE, OFFICE_CODE, EMAIL, PHONE
		FROM (
		SELECT ROW_NUMBER() OVER(ORDER BY EMP_NUM ASC) AS NO, EMP_NUM, EMP_NAME, B.CODE_NAME AS POSITION_CODE, C.CODE_NAME AS OFFICE_CODE, EMAIL, PHONE, E.HOSPITAL_CODE
		FROM EMP E LEFT OUTER JOIN (SELECT * FROM CODEDATA WHERE BIG = '9') C
		ON E.OFFICE_CODE = C.SMALL
		LEFT OUTER JOIN (SELECT * FROM CODEDATA WHERE BIG = '8') B
		ON E.POSITION_CODE = B.SMALL
		WHERE 1 = 1
		AND E.HOSPITAL_CODE = #sHospital_Code#
		<isNotEmpty property="Esearch_Text1">
			<isEqual property="selE_b" compareValue="EMP_NUM">
				AND E.EMP_NUM LIKE '%' || #Esearch_Text1# || '%'
			</isEqual>
			<isEqual property="selE_b" compareValue="EMP_NAME">
				AND E.EMP_NAME LIKE '%' || #Esearch_Text1# || '%'
			</isEqual>
			<isEqual property="selE_b" compareValue="POSITION_CODE">
				AND B.CODE_NAME LIKE '%' || #Esearch_Text1# || '%'
			</isEqual>
			<isEqual property="selE_b" compareValue="OFFICE_CODE">
				AND C.CODE_NAME LIKE '%' || #Esearch_Text1# || '%'
			</isEqual>
			<isEqual property="selE_b" compareValue="PHONE">
				AND E.PHONE LIKE '%' || #Esearch_Text1# || '%'
			</isEqual>
		</isNotEmpty> <!-- 검색 -->
		) A
		WHERE NO BETWEEN #start# AND #end#
	</select> <!-- 직원조회 데이터 쿼리 -->
	
	<select id="Emp_Count" parameterClass="java.util.HashMap" resultClass="Integer">
		SELECT COUNT(EMP_NUM) AS CNT
		FROM EMP E LEFT OUTER JOIN (SELECT * FROM CODEDATA WHERE BIG = '9') C
		ON E.OFFICE_CODE = C.SMALL
		LEFT OUTER JOIN (SELECT * FROM CODEDATA WHERE BIG = '8') B
		ON E.POSITION_CODE = B.SMALL
		WHERE 1 = 1
		AND E.HOSPITAL_CODE = #sHospital_Code#
		<isNotEmpty property="Esearch_Text1">
			<isEqual property="selE_b" compareValue="EMP_NUM">
				AND EMP_NUM LIKE '%' || #Esearch_Text1# || '%'
			</isEqual>
			<isEqual property="selE_b" compareValue="EMP_NAME">
				AND EMP_NAME LIKE '%' || #Esearch_Text1# || '%'
			</isEqual>
			<isEqual property="selE_b" compareValue="POSITION_CODE">
				AND B.CODE_NAME LIKE '%' || #Esearch_Text1# || '%'
			</isEqual>
			<isEqual property="selE_b" compareValue="OFFICE_CODE">
				AND C.CODE_NAME LIKE '%' || #Esearch_Text1# || '%'
			</isEqual>
			<isEqual property="selE_b" compareValue="PHONE">
				AND PHONE LIKE '%' || #Esearch_Text1# || '%'
			</isEqual>
		</isNotEmpty> <!-- 검색 -->
	</select> <!-- 환자조회 카운터 쿼리 -->
	
	<select id="Details_DataList" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT A.PATIENT_NUM AS PAT_NUM, A.PATIENT_NAME, A.CODE_NAME AS SEX_CODE, A.ADDRESS, A.PHONE1, A.PHONE2, B.CODE_NAME AS BLOOD, B.WEI, B.HEI, B.HANDICAP, B.PHOTO
		FROM
		(
		SELECT P.PATIENT_NUM, P.PATIENT_NAME, P.PHONE1, P.PHONE2, C.CODE_NAME, P.ADDRESS
		FROM PATIENT P LEFT OUTER JOIN (SELECT * FROM CODEDATA WHERE BIG = '2') C
		ON P.SEX_CODE = C.SMALL
		) A
		LEFT OUTER JOIN
		(
		SELECT M.PATIENT_NUM, M.HEI, M.WEI, C.CODE_NAME, M.HANDICAP, M.PHOTO
		FROM PATIENTMORE M LEFT OUTER JOIN (SELECT * FROM CODEDATA WHERE BIG = '3') C
		ON M.BLOOD = C.SMALL
		) B
		ON A.PATIENT_NUM = B.PATIENT_NUM
		WHERE A.PATIENT_NUM = #patinum#
	</select> <!-- 환자 상세조회 데이터 쿼리 -->
	
	<select id="Det_DataList" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT *
		FROM
		(
		SELECT ROW_NUMBER() OVER(ORDER BY B.TREAT_NUM DESC) AS NO,
		B.SYM, B.SPECIAL_NOTE, B.DIAGNOSIS, B.OPINION, TO_CHAR(B.POSTING_DATE, 'YYYY-MM-DD') AS POSTING_DATE, B.EMP_NUM2, B.PATIENT_NUM, B.TREAT_NUM, B.NUM
		FROM (
		SELECT ROW_NUMBER() OVER(PARTITION BY A.TREAT_NUM ORDER BY A.POSTING_DATE DESC) AS NO,
		A.SYM, A.SPECIAL_NOTE, A.DIAGNOSIS, A.OPINION, A.POSTING_DATE, A.EMP_NUM2, P.PATIENT_NUM, A.TREAT_NUM, A.NUM
		FROM
		(
		SELECT T.TREAT_NUM, T.SYM, T.SPECIAL_NOTE, T.DIAGNOSIS, T.OPINION, T.POSTING_DATE, F.EMP_NUM2, F.PATIENT_NUM, T.NUM
		FROM TREATHISTORY T LEFT OUTER JOIN TREATINFO F
		ON T.TREAT_NUM = F.TREAT_NUM
		) A
		LEFT OUTER JOIN PATIENT P
		ON A.PATIENT_NUM = P.PATIENT_NUM
		WHERE P.PATIENT_NUM = #patinum#
		) B
		WHERE NO = 1
		ORDER BY NO ASC
		) C
		WHERE NO BETWEEN 1 AND 10
	</select> <!-- 진단기록 데이터 쿼리 -->
	
	<select id="Det_DataList2" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT NO, B.PILL_NAME, B.PRESCRIPTION_AMOUNT, B.DAY_DRUGTIME, B.ALL_DRUGTIME, B.EMP_NUM2, B.POSTING_DATE, B.PATIENT_NUM, B.TREAT_NUM
		FROM
		(
		SELECT ROW_NUMBER() OVER(ORDER BY R.TREAT_NUM DESC) AS NO, A.PILL_NAME, A.PRESCRIPTION_AMOUNT, A.DAY_DRUGTIME, A.ALL_DRUGTIME, R.EMP_NUM2, TO_CHAR(A.POSTING_DATE, 'YYYY-MM-DD') AS POSTING_DATE, R.TREAT_NUM, R.PATIENT_NUM
		FROM
		(
		SELECT T.TREAT_NUM, T.POSTING_DATE, P.PILL_NAME, P.PRESCRIPTION_AMOUNT, P.DAY_DRUGTIME, P.ALL_DRUGTIME
		FROM PILL P LEFT OUTER JOIN TREATHISTORY T
		ON P.TREAT_NUM = T.TREAT_NUM
		AND P.NUM = T.NUM
		) A LEFT OUTER JOIN TREATINFO R
		ON A.TREAT_NUM = R.TREAT_NUM
		WHERE R.TREAT_NUM = #treat_num#
		) B
	</select> <!-- 처방기록 데이터 쿼리 -->
	
	<select id="insert_SEQ_NEXTVAL" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT PATIENT_LGW_SEQ.NEXTVAL AS PATIENTSEQ
		FROM DUAL
	</select> <!-- SEQ.NEXTVAL -->
	
	<insert id="pat_insert" parameterClass="java.util.HashMap">
		INSERT INTO PATIENT(PATIENT_NUM, PATIENT_NAME, BIRTH, PHONE1, PHONE2, SEX_CODE, ADDRESS, EMAIL)
		VALUES (#PATIENTSEQ#, #PATIENT_NAME#, #BIRTH#, #PHONE1#, #PHONE2#, #pat_sex#, #ADDRESS#, #EMAIL#)
	</insert> <!-- (환자등록)환자정보 데이터 쿼리 -->
	
	<insert id="patmore_insert" parameterClass="java.util.HashMap">
		INSERT INTO PATIENTMORE(PATIENT_NUM, HEI, WEI, LEFT_EYE, RIGHT_EYE, BLOOD, HANDICAP, DISEASE, SMOKING, DRINKING, MARRIAGE, PHOTO)
		VALUES (#PATIENTSEQ#, #HEI#, #WEI#, #LEFT_EYE#, #RIGHT_EYE#, #B_type#, #HANDICAP#, #DISEASE#, #hip#, #chm#, #marri#, #textFile#)
	</insert> <!-- (환자등록)환자 추가정보 데이터 쿼리 -->
	
	<select id="Set_DataList" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT NO, A.PATIENT_NUM, A.APPOINTMENT_TIME, A.TAKE_TIME, A.PATIENT_NAME, A.OFFICE, A.EMP_NAME, A.SORT_TYPE, A.TAKE_DATE, A.CONDITION, A.ETC, A.TREAT_NUM
		FROM
		(
		SELECT ROW_NUMBER() OVER(ORDER BY TAKE_DATE ASC) AS NO, T.PATIENT_NUM, P.PATIENT_NAME, K.EMP_NAME, S.CODE_NAME AS SORT_TYPE, M.CODE_NAME AS CONDITION, T.ETC, L.CODE_NAME AS OFFICE, TO_CHAR(I.TAKE_DATE, 'YYYY-MM-DD') AS TAKE_DATE, TO_CHAR(I.TAKE_DATE, 'HH24:MI') AS TAKE_TIME, TO_CHAR(I.APPOINTMENT_DATE, 'YYYY-MM-DD') AS APPOINTMENT_DATE, TO_CHAR(I.APPOINTMENT_DATE, 'HH24:MI') AS APPOINTMENT_TIME, T.TREAT_NUM
		FROM TREATINFO T LEFT OUTER JOIN (SELECT * FROM CODEDATA WHERE BIG = '13') S
		ON T.SORT_TYPE = S.SMALL
		LEFT OUTER JOIN (SELECT * FROM CODEDATA WHERE BIG = '4') M
		ON T.CONDITION = M.SMALL
		LEFT OUTER JOIN (SELECT * FROM CODEDATA WHERE BIG = '9') L
		ON T.OFFICE = L.SMALL
		LEFT OUTER JOIN TIME I
		ON T.TREAT_NUM = I.TREAT_NUM
		LEFT OUTER JOIN (SELECT E.HOSPITAL_CODE, EMP_NAME, E.EMP_NUM
		FROM EMP E LEFT OUTER JOIN HOSPITAL H
		ON E.HOSPITAL_CODE = H.HOSPITAL_CODE
		WHERE E.HOSPITAL_CODE = #sHospital_Code#) K
		ON T.EMP_NUM2 = K.EMP_NUM
		LEFT OUTER JOIN PATIENT P
		ON T.PATIENT_NUM = P.PATIENT_NUM
		WHERE 1 = 1
		<isEmpty property="St_calendar">
			AND (TO_CHAR(SYSDATE, 'YYYY-MM-DD') = TO_CHAR(TAKE_DATE, 'YYYY-MM-DD')
			OR TO_CHAR(SYSDATE, 'YYYY-MM-DD') = TO_CHAR(APPOINTMENT_DATE, 'YYYY-MM-DD'))
		</isEmpty> <!-- 일시 -->
		<isNotEmpty property="St_calendar">
 			AND (#St_calendar# = TO_CHAR(TAKE_DATE, 'YYYY-MM-DD')
			OR #St_calendar# = TO_CHAR(APPOINTMENT_DATE, 'YYYY-MM-DD'))
 		</isNotEmpty> <!-- 일시 -->
		<isNotEmpty property="St_box">
			AND T.SORT_TYPE = #St_box#
 		</isNotEmpty> <!-- 구분 -->
 		<isNotEmpty property="Tselect_box2">
			AND T.OFFICE = #Tselect_box2#
 		</isNotEmpty> <!-- 진료과 -->
 		 <isNotEmpty property="Tselect_box3">
			AND T.EMP_NUM2 = #Tselect_box3#
 		</isNotEmpty> <!-- 진료의사 -->
		) A
		WHERE 1 = 1
		<isNotEmpty property="S_search_Text1">
			<isEqual property="selSet_b" compareValue="PATIENT_NUM">
				AND A.PATIENT_NUM LIKE '%' || #S_search_Text1# || '%'
			</isEqual>
			<isEqual property="selSet_b" compareValue="PATIENT_NAME">
				AND A.PATIENT_NAME LIKE '%' || #S_search_Text1# || '%'
			</isEqual>
			<isEqual property="selSet_b" compareValue="OFFICE">
				AND A.OFFICE LIKE '%' || #S_search_Text1# || '%'
			</isEqual>
			<isEqual property="selSet_b" compareValue="EMP_NAME">
				AND A.EMP_NAME LIKE '%' || #S_search_Text1# || '%'
			</isEqual>
			<isEqual property="selSet_b" compareValue="SORT_TYPE">
				AND A.SORT_TYPE LIKE '%' || #S_search_Text1# || '%'
			</isEqual>
			<isEqual property="selSet_b" compareValue="TAKE_DATE">
				AND A.TAKE_DATE LIKE '%' || #S_search_Text1# || '%'
			</isEqual>
			<isEqual property="selSet_b" compareValue="CONDITION">
				AND A.CONDITION LIKE '%' || #S_search_Text1# || '%'
			</isEqual> <!-- 검색 -->
		</isNotEmpty>
		AND NO BETWEEN #start# AND #end#
	</select> <!-- 환자일정 조회정보 데이터 쿼리 -->
	
	<select id="Set_Count" parameterClass="java.util.HashMap" resultClass="Integer">
		SELECT COUNT(PATIENT_NUM) AS CNT
		FROM
		(
		SELECT ROW_NUMBER() OVER(ORDER BY TAKE_DATE ASC) AS NO, T.PATIENT_NUM, P.PATIENT_NAME, K.EMP_NAME, S.CODE_NAME AS SORT_TYPE, M.CODE_NAME AS CONDITION, T.ETC, L.CODE_NAME AS OFFICE, TO_CHAR(I.TAKE_DATE, 'YYYY-MM-DD') AS TAKE_DATE, TO_CHAR(I.TAKE_DATE, 'HH24:MI') AS TAKE_TIME, TO_CHAR(I.APPOINTMENT_DATE, 'YYYY-MM-DD') AS APPOINTMENT_DATE, TO_CHAR(I.APPOINTMENT_DATE, 'HH24:MI') AS APPOINTMENT_TIME
		FROM TREATINFO T LEFT OUTER JOIN (SELECT * FROM CODEDATA WHERE BIG = '13') S
		ON T.SORT_TYPE = S.SMALL
		LEFT OUTER JOIN (SELECT * FROM CODEDATA WHERE BIG = '4') M
		ON T.CONDITION = M.SMALL
		LEFT OUTER JOIN (SELECT * FROM CODEDATA WHERE BIG = '9') L
		ON T.OFFICE = L.SMALL
		LEFT OUTER JOIN TIME I
		ON T.TREAT_NUM = I.TREAT_NUM
		LEFT OUTER JOIN (SELECT E.HOSPITAL_CODE, EMP_NAME, E.EMP_NUM
		FROM EMP E LEFT OUTER JOIN HOSPITAL H
		ON E.HOSPITAL_CODE = H.HOSPITAL_CODE
		WHERE E.HOSPITAL_CODE = #sHospital_Code#) K
		ON T.EMP_NUM2 = K.EMP_NUM
		LEFT OUTER JOIN PATIENT P
		ON T.PATIENT_NUM = P.PATIENT_NUM
		WHERE TO_CHAR(SYSDATE, 'YYYY-MM-DD') = TO_CHAR(TAKE_DATE, 'YYYY-MM-DD')
		OR TO_CHAR(SYSDATE, 'YYYY-MM-DD') = TO_CHAR(APPOINTMENT_DATE, 'YYYY-MM-DD')
		) A
		WHERE 1 = 1
	</select> <!-- 환자일정 조회 카운터 쿼리 -->
	
	<select id="St_Data" resultClass="java.util.HashMap">
		SELECT SMALL, CODE_NAME
		FROM CODEDATA
		WHERE BIG = 9
	</select> <!-- 진료과 데이터 타입 쿼리 -->

	<select id="Doc_data" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT EMP_NUM, EMP_NAME
		FROM EMP
		WHERE LV_CODE = 2 
		AND HOSPITAL_CODE = #sHospital_Code#
		AND OFFICE_CODE = #Select_doc#
	</select> <!-- 진료의사 데이터 타입 쿼리 -->
	
	<select id="Service_Data" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT PHONE, C.CODE_NAME AS LV_CODE, A.CODE_NAME AS POSITION_CODE, B.CODE_NAME AS OFFICE_CODE, TO_CHAR(BIRTH, 'YYYY-DD-MM')AS BIRTH, EMAIL, ADDRESS, EMP_NUM
		FROM EMP E LEFT OUTER JOIN (SELECT * FROM CODEDATA WHERE BIG = 8) A
		ON E.POSITION_CODE = A.SMALL
		LEFT OUTER JOIN (SELECT * FROM CODEDATA WHERE BIG = 9) B
		ON E.OFFICE_CODE = B.SMALL
		LEFT OUTER JOIN (SELECT * FROM CODEDATA WHERE BIG = 10) C
		ON E.LV_CODE = C.SMALL
		WHERE EMP_NUM = #Emp_Num#
	</select> <!-- 회원정보수정 데이터 쿼리 -->
	
	<update id="update_Service" parameterClass="java.util.HashMap">
		UPDATE EMP SET PHONE = #Phone#,
		EMAIL = #Email#,
		ADDRESS = #Address#
		WHERE EMP_NUM = #Emp_Num#
		AND HOSPITAL_CODE = #Hospital_Code#
	</update> <!-- 회원정보수정 쿼리 -->
	
	<select id="Password_Data" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		SELECT PW
		FROM EMP
		WHERE EMP_NUM = #Emp_Num#
		AND HOSPITAL_CODE = #Hospital_Code#
	</select> <!-- 비밀번호 확인 쿼리 -->
	
	<update id="update_Password" parameterClass="java.util.HashMap">
		UPDATE EMP SET PW = #Emp_New_Password#
		WHERE EMP_NUM = #Emp_Num#
		AND HOSPITAL_CODE = #Hospital_Code#
	</update> <!-- 비밀번호 변경 쿼리 -->
	
	<select id="Chart_Data" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		  SELECT M.MON AS MM, NVL(COUNT(T.TREAT_NUM), 0) AS DATA, '0' AS GBN, '예약자' AS NAME
		  FROM (SELECT LPAD(LEVEL, 2, '0') MON 
		           FROM DUAL CONNECT BY LEVEL &lt;= 12) M LEFT OUTER JOIN TIME T
                                                                    ON M.MON = TO_CHAR(T.APPOINTMENT_DATE, 'MM')
                                                                   AND T.APPOINTMENT_DATE IS NOT NULL
                                                                   AND TO_CHAR(T.APPOINTMENT_DATE, 'YYYY') = TO_CHAR(SYSDATE, 'YYYY')
                                                       LEFT OUTER JOIN TREATINFO TI
                                                                    ON T.TREAT_NUM = TI.TREAT_NUM
                                                                   AND TI.HOSPITAL_CODE = #Hospital_Code#
		  GROUP BY M.MON
		  UNION ALL
		  SELECT M.MON AS MM, NVL(COUNT(T.TREAT_NUM), 0) AS DATA, '1' AS GBN, '방문자' AS NAME
		  FROM  (SELECT LPAD(LEVEL, 2, '0') MON 
		           FROM DUAL CONNECT BY LEVEL &lt;= 12) M LEFT OUTER JOIN TIME T
                                                                    ON M.MON = TO_CHAR(T.TAKE_DATE, 'MM')
                                                                   AND T.TAKE_DATE IS NOT NULL
                                                                   AND TO_CHAR(T.TAKE_DATE, 'YYYY') = TO_CHAR(SYSDATE, 'YYYY')
                                                       LEFT OUTER JOIN TREATINFO TI
                                                                    ON T.TREAT_NUM = TI.TREAT_NUM
                                                                   AND TI.HOSPITAL_CODE = #Hospital_Code#
		  GROUP BY M.MON
		  ORDER BY GBN, MM
	</select> <!-- 환자방문 쿼리 -->
</sqlMap>